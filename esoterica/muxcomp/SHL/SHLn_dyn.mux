# Dynamic SHL n bits (up to 63)
# 24 ops for SHL63

# zero_mask = ffffffffffffffe
# Pseudo-code:
# TEST(0), jump to label 1 if clear
# ROL1
# SHL1_special(zero_mask)
# label1:
# TEST(1), jump to label 2 if clear
# ROL2
# SHL2_special(zero_mask)
# label2:
# TEST(2), jump to label 3 if clear
# ROL4
# SHL4_special(zero_mask)
# label3:
# TEST(3), jump to label 4 if clear
# ROL8
# SHL8_special(zero_mask)
# label4:
# TEST(4), jump to label 5 if clear
# ROL16
# SHL16_special(zero_mask)
# label5:
# TEST(5), jump to label 6 if clear
# ROL32
# SHL32_special(zero_mask)
# label6:
# result -> result (for visibility in the trace)
# HLT

.org 0
0000000000000100

.org 10 # value to be rotated
0123456789abcdef

.org 20 # amount to rotate it (mod 64)
000000000000003d

.org 30 # other data
0000000000000000 # 30 
ffffffffffffffff # 31
cacacacacacacaca # 32 MUX_2_TO_1 opcode
0000000000000110 # 33
0000000000000118 # 34
0000000000000128 # 35
0000000000000130 # 36
0000000000000140 # 37
0000000000000148 # 38
0000000000000158 # 39
0000000000000160 # 3a
0000000000000170 # 3b
0000000000000178 # 3c
0000000000000188 # 3d
0000000000000190 # 3d

.org 40 #temp variables
# 40 = A
# 41 = B

.org 50
5555555555555555 # ROL1 operands
9999999999999999
e1e1e1e1e1e1e1e1
fe01fe01fe01fe01
fffe0001fffe0001
fffffffe00000001

# org 56
aaaaaaaaaaaaaaaa # ROL2 operands
3333333333333333
c3c3c3c3c3c3c3c3
fc03fc03fc03fc03
fffc0003fffc0003
fffffffc00000003

# org 5c
aaaaaaaaaaaaaaaa # ROL4 operands
cccccccccccccccc
0f0f0f0f0f0f0f0f
f00ff00ff00ff00f
fff0000ffff0000f
fffffff00000000f

# org 62
aaaaaaaaaaaaaaaa # ROL8 operands
cccccccccccccccc 
f0f0f0f0f0f0f0f0 
00ff00ff00ff00ff 
ff0000ffff0000ff 
ffffff00000000ff

# org 68
aaaaaaaaaaaaaaaa # ROL16 operands
cccccccccccccccc 
f0f0f0f0f0f0f0f0 
ff00ff00ff00ff00 
0000ffff0000ffff 
ffff00000000ffff

# org 6e
aaaaaaaaaaaaaaaa # ROL32 operands
cccccccccccccccc
f0f0f0f0f0f0f0f0
ff00ff00ff00ff00
ffff0000ffff0000
00000000ffffffff

# org 74
aaaaaaaaaaaaaaaa # IDENT operands
cccccccccccccccc 
f0f0f0f0f0f0f0f0 
ff00ff00ff00ff00 
ffff0000ffff0000 
ffffffff00000000 

.org 100
0000000000000030 #TEST 0
0000000000000030
0000000000000030
0000000000000030
0000000000000030
0000000000000030
0000000000000020
0000000000000040 # A

# org 108
0000000000000034
0000000000000033 
0000000000000040 # A
0000000000000030
0000000000000030
0000000000000030
0000000000000032 # MUX_2_TO_1
0000000000000000 # PC

# org 110
0000000000000050 # ROL1
0000000000000051
0000000000000052
0000000000000053
0000000000000054
0000000000000055
0000000000000010 # value to be rotated
0000000000000010

# org 118
0000000000000031 #TEST 1
0000000000000030
0000000000000030
0000000000000030
0000000000000030
0000000000000030
0000000000000020
0000000000000040 # A

# org 120
0000000000000036
0000000000000035 
0000000000000040 # A
0000000000000030
0000000000000030
0000000000000030
0000000000000032 # MUX_2_TO_1
0000000000000000 # PC

# org 128
0000000000000056 # ROL2
0000000000000057
0000000000000058
0000000000000059
000000000000005a
000000000000005b
0000000000000010
0000000000000010

# org 130
0000000000000030 #TEST 2
0000000000000031
0000000000000030
0000000000000030
0000000000000030
0000000000000030
0000000000000020
0000000000000040 # A

# org 138
0000000000000038
0000000000000037 
0000000000000040 # A
0000000000000030
0000000000000030
0000000000000030
0000000000000032 # MUX_2_TO_1
0000000000000000 # PC

# org 140
000000000000005c # ROL4
000000000000005d
000000000000005e
000000000000005f
0000000000000060
0000000000000061
0000000000000010
0000000000000010

# org 148
0000000000000031 #TEST 3
0000000000000031
0000000000000030
0000000000000030
0000000000000030
0000000000000030
0000000000000020
0000000000000040 # A

# org 150
000000000000003a
0000000000000039 
0000000000000040 # A
0000000000000030
0000000000000030
0000000000000030
0000000000000032 # MUX_2_TO_1
0000000000000000 # PC

# org 158
0000000000000062 # ROL8
0000000000000063
0000000000000064
0000000000000065
0000000000000066
0000000000000067
0000000000000010
0000000000000010


# org 160
0000000000000030 #TEST 4
0000000000000030
0000000000000031
0000000000000030
0000000000000030
0000000000000030
0000000000000020
0000000000000040 # A

# org 168
000000000000003c
000000000000003b 
0000000000000040 # A
0000000000000030
0000000000000030
0000000000000030
0000000000000032 # MUX_2_TO_1
0000000000000000 # PC

# org 170
0000000000000068 # ROL16
0000000000000069
000000000000006a
000000000000006b
000000000000006c
000000000000006d
0000000000000010
0000000000000010

# org 178
0000000000000031 #TEST 5
0000000000000030
0000000000000031
0000000000000030
0000000000000030
0000000000000030
0000000000000020
0000000000000040 # A

# org 180
000000000000003e
000000000000003d
0000000000000040 # A
0000000000000030
0000000000000030
0000000000000030
0000000000000032 # MUX_2_TO_1
0000000000000000 # PC

# org 188
000000000000006e # ROL32
000000000000006f
0000000000000070
0000000000000071
0000000000000072
0000000000000073
0000000000000010
0000000000000010

#org 190
0000000000000074 # Just to make result visible at the end...
0000000000000075
0000000000000076
0000000000000077
0000000000000078
0000000000000079
0000000000000010
0000000000000010

#org 198
0000000000000074 # HALT (PC -> PC)
0000000000000075
0000000000000076
0000000000000077
0000000000000078
0000000000000079
0000000000000000
0000000000000000

#done!

.org 30
0000000000000000

